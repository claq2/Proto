// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JobConfig.proto

#ifndef PROTOBUF_JobConfig_2eproto__INCLUDED
#define PROTOBUF_JobConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_JobConfig_2eproto();
void protobuf_AssignDesc_JobConfig_2eproto();
void protobuf_ShutdownFile_JobConfig_2eproto();

class GetJobConfigRequest;
class GetJobConfigResponse;

// ===================================================================

class GetJobConfigRequest : public ::google::protobuf::Message {
 public:
  GetJobConfigRequest();
  virtual ~GetJobConfigRequest();

  GetJobConfigRequest(const GetJobConfigRequest& from);

  inline GetJobConfigRequest& operator=(const GetJobConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJobConfigRequest& default_instance();

  void Swap(GetJobConfigRequest* other);

  // implements Message ----------------------------------------------

  GetJobConfigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetJobConfigRequest& from);
  void MergeFrom(const GetJobConfigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string jobId = 1;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobIdFieldNumber = 1;
  inline const ::std::string& jobid() const;
  inline void set_jobid(const ::std::string& value);
  inline void set_jobid(const char* value);
  inline void set_jobid(const char* value, size_t size);
  inline ::std::string* mutable_jobid();
  inline ::std::string* release_jobid();
  inline void set_allocated_jobid(::std::string* jobid);

  // optional string userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:GetJobConfigRequest)
 private:
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* jobid_;
  ::std::string* userid_;
  friend void  protobuf_AddDesc_JobConfig_2eproto();
  friend void protobuf_AssignDesc_JobConfig_2eproto();
  friend void protobuf_ShutdownFile_JobConfig_2eproto();

  void InitAsDefaultInstance();
  static GetJobConfigRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetJobConfigResponse : public ::google::protobuf::Message {
 public:
  GetJobConfigResponse();
  virtual ~GetJobConfigResponse();

  GetJobConfigResponse(const GetJobConfigResponse& from);

  inline GetJobConfigResponse& operator=(const GetJobConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJobConfigResponse& default_instance();

  void Swap(GetJobConfigResponse* other);

  // implements Message ----------------------------------------------

  GetJobConfigResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetJobConfigResponse& from);
  void MergeFrom(const GetJobConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:GetJobConfigResponse)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_JobConfig_2eproto();
  friend void protobuf_AssignDesc_JobConfig_2eproto();
  friend void protobuf_ShutdownFile_JobConfig_2eproto();

  void InitAsDefaultInstance();
  static GetJobConfigResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetJobConfigRequest

// optional string jobId = 1;
inline bool GetJobConfigRequest::has_jobid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetJobConfigRequest::set_has_jobid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetJobConfigRequest::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetJobConfigRequest::clear_jobid() {
  if (jobid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobid_->clear();
  }
  clear_has_jobid();
}
inline const ::std::string& GetJobConfigRequest::jobid() const {
  // @@protoc_insertion_point(field_get:GetJobConfigRequest.jobId)
  return *jobid_;
}
inline void GetJobConfigRequest::set_jobid(const ::std::string& value) {
  set_has_jobid();
  if (jobid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobid_ = new ::std::string;
  }
  jobid_->assign(value);
  // @@protoc_insertion_point(field_set:GetJobConfigRequest.jobId)
}
inline void GetJobConfigRequest::set_jobid(const char* value) {
  set_has_jobid();
  if (jobid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobid_ = new ::std::string;
  }
  jobid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetJobConfigRequest.jobId)
}
inline void GetJobConfigRequest::set_jobid(const char* value, size_t size) {
  set_has_jobid();
  if (jobid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobid_ = new ::std::string;
  }
  jobid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetJobConfigRequest.jobId)
}
inline ::std::string* GetJobConfigRequest::mutable_jobid() {
  set_has_jobid();
  if (jobid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jobid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetJobConfigRequest.jobId)
  return jobid_;
}
inline ::std::string* GetJobConfigRequest::release_jobid() {
  clear_has_jobid();
  if (jobid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jobid_;
    jobid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetJobConfigRequest::set_allocated_jobid(::std::string* jobid) {
  if (jobid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobid_;
  }
  if (jobid) {
    set_has_jobid();
    jobid_ = jobid;
  } else {
    clear_has_jobid();
    jobid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetJobConfigRequest.jobId)
}

// optional string userId = 2;
inline bool GetJobConfigRequest::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetJobConfigRequest::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetJobConfigRequest::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetJobConfigRequest::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& GetJobConfigRequest::userid() const {
  // @@protoc_insertion_point(field_get:GetJobConfigRequest.userId)
  return *userid_;
}
inline void GetJobConfigRequest::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:GetJobConfigRequest.userId)
}
inline void GetJobConfigRequest::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetJobConfigRequest.userId)
}
inline void GetJobConfigRequest::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetJobConfigRequest.userId)
}
inline ::std::string* GetJobConfigRequest::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetJobConfigRequest.userId)
  return userid_;
}
inline ::std::string* GetJobConfigRequest::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetJobConfigRequest::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetJobConfigRequest.userId)
}

// -------------------------------------------------------------------

// GetJobConfigResponse

// optional string name = 1;
inline bool GetJobConfigResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetJobConfigResponse::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetJobConfigResponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetJobConfigResponse::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GetJobConfigResponse::name() const {
  // @@protoc_insertion_point(field_get:GetJobConfigResponse.name)
  return *name_;
}
inline void GetJobConfigResponse::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GetJobConfigResponse.name)
}
inline void GetJobConfigResponse::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GetJobConfigResponse.name)
}
inline void GetJobConfigResponse::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetJobConfigResponse.name)
}
inline ::std::string* GetJobConfigResponse::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GetJobConfigResponse.name)
  return name_;
}
inline ::std::string* GetJobConfigResponse::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetJobConfigResponse::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GetJobConfigResponse.name)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JobConfig_2eproto__INCLUDED
